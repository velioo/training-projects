var Metadata = require('./metadata');

var Provider = function Provider(cfg) {
  this.metadataClass = cfg.Metadata || require('./metadata');
  this.koa = cfg.koa || require('koa');
};

/**
 * This returns the middleware and applies it to the context
 * @return {[type]} [description]
 */
Provider.prototype.middleware = function() {

  var app = new this.koa();
  var _this = this;

  app.use(function *(next) {
    this.auth = new Auth(_this, this);
    yield next;
  });

  return app;
};

/**
 * This will return an object that respects the Metadata interface. By default
 * it will return a metadata object that uses the session.
 *
 * @param {[type]} authInstance [description]
 * @param {[type]} context      [description]
 */
Provider.prototype.getMetadataPocket = function(authInstance, context) {
  return new this.Metadata(context.session);
};

module.exports = Provider;
