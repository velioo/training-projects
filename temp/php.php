<?php 
$a = PHP_INT_MAX;
echo "MAX INT = " . $a . " " . gettype($a) . "\n";
$a++;
echo "MAX INT + 1 = " . ($a). " " . gettype($a) . "\n";
$a = $a * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;
$a = PHP_INT_MIN;
echo "MIN INT = " . $a . " " . gettype($a) . "\n";
$a--;
echo "MIN INT - 1 = " . $a. " " . gettype($a) . "\n";
$a = 2;
$a = $a * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;
echo "2 * 99999... = " . $a . " " . gettype($a) . "\n";
$a = -2;
$a = $a * 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;
echo "-2 * 99999.... = " . $a . " " . gettype(INF) . "\n";
//Never cast an unknown fraction to integer
$a = (int)((0.1 + 0.7) * 10);
echo "(int)((0.1 + 0.7) * 10) = " . $a . "\n";
$a = INF / INF;
echo "INF / INF = " . $a . "\n";
$a = 0 * INF;
echo "0 * INF = " . $a . "\n";
$a = INF - INF;
echo "INF - INF = " . $a . "\n";
$a = 1 / INF;
echo "1 / INF = " . $a . "\n";
$a = INF / 0;
echo "INF / 0 = " . $a . "\n";
$a = NaN + 1;
echo "NaN + 1 = " . $a . "\n";
$a = 1 + 5 / 3;
echo "1 + 5 / 3 = " . $a . "\n";
$a = 1 + '1';
echo "1 + '1' = " . $a . " " . gettype($a) . "\n"; 
$a = '1' - 1 + '5';
echo "'1' - 1 + '5' = " . $a . " " . gettype($a) . "\n";
$a = '1' * '5.2';
echo "'1' * '5.2' = " . $a . " " . gettype($a) . "\n";
$a = 'a1' - '5';
echo "'a1' - '5' = " . $a . " " . gettype($a) . "\n";
$a = 0b101;
echo "Binary a = " . $a . "\n";
$a = 05;
echo "Octal a = " . $a . "\n";
$a = 0x5;
echo "Hexadecimal a = " . $a . "\n";
echo "--------Strings----------\n";
$a = "1";
echo "Before test(a) a = {$a}\n"; 
function test($a) { // &a
	echo "Before assignment a = {$a}\n";
	$a = "2";
	echo "After assignment a = {$a}\n";
}
test($a);
echo "After test(a) a = {$a}\n";
$b = $a;
echo "b = a = {$b}\n";
$a = "3";
echo "Change: a = {$a}\n";
echo "b = {$b}\n";
echo "ф╕нцЦЗ espa├▒ol deutsch English рд╣рд┐рдиреНрджреА ╪з┘Д╪╣╪▒╪и┘К╪й portugu├кs ржмрж╛ржВрж▓рж╛ ╤А╤Г╤Б╤Б╨║╨╕╨╣ цЧецЬмшкЮ рикрй░риЬри╛римрйА эХЬъ╡ньЦ┤ родрооро┐ро┤рпН ╫в╫С╫и╫Щ╫к\n";
echo "\u5c07\u63a2\u8a0e HTML5 \u53ca\u5176\u4ed6ЁЯРД\n";
$str = "\u{5c07}\u{63a2}\u{8a0e} HTML5 \u{53ca}\u{5176}\u{4ed6}ЁЯРД\n";
echo $str;
echo mb_detect_encoding($str) . "\n";
$str1 = "Hello, there";
$str2 = "Goodbye!";
printf("Printf: %s %s\n", $str1, $str2);
$s = sprintf("Printf: %s %s", $str1, $str2);
echo "sprintf: \$s = $s\n";
$str1 = "there";
echo "\$str1 = $str1\n";
echo "\$str1: Hello {$str1}\n";
echo "{\$str}: Hello {$str1}\n";
echo "\${str}: Hello ${str1}\n";
echo "\$str1[0] = 'w'\n";
$str1[0] = "w";
echo "\$str1 = $str1" . "\n";
echo "preg_match('/(foo)(bar)(baz)/', 'foobarbaz foobarbaz')\n";
preg_match('/(foo)(bar)(baz)/', 'foobarbaz foobarbaz', $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
echo "preg_match_all('/(foo)(bar)(baz)/', 'foobarbaz foobarbaz')\n";
preg_match_all('/(foo)(bar)(baz)/', 'foobarbaz foobarbaz', $matches, PREG_OFFSET_CAPTURE);
print_r($matches);
$str = 'April 15, 2017';
echo "\$str = $str\n";
$pattern = '/(\w+) (\d+), (\d+)/i';
echo "pattern = /(\w+) (\d+), (\d+)/i\n";
$replacement = '${1} 20, $3';
echo "\$replacement = $replacement\n";
echo "preg_replace(\$pattern, \$replacement, \$str): " . preg_replace($pattern, $replacement, $str) . "\n";
$str = 'The quick brown fox jumps over the lazy dog.';
echo "\$str = $str\n";
$patterns = array();
$patterns[0] = '/quick/';
$patterns[1] = '/brown/';
$patterns[2] = '/fox/';
echo "Array of patterns: \n";
print_r($patterns);
$replacements = array();
$replacements[2] = 'bear';
$replacements[1] = 'black';
$replacements[0] = 'slow';
echo "ksort \$patterns and \$repalcements\n";
ksort($patterns);
ksort($replacements);
echo "Array of replacements: \n";
print_r($replacements);
echo "preg_replace(\$pattern, \$replacement, \$str): " . preg_replace($patterns, $replacements, $str) . "\n";
echo "strstr($str, quick): " . strstr($str, 'quick') . "\n";
echo "strpos($str, quick): " . strpos($str, 'quick') . "\n";
echo "strpbrk($str, iu): " . strpbrk($str, 'iu') . "\n";
echo "str_replace('fox', 'bear', $str): " . str_replace('fox', 'bear', $str) . "\n";
